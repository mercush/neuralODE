C:\Users\Mauricio Barba\Documents\GitHub\neuralODE\mau\ode_genre_classification_image.py
import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
import pandas as pd
from skimage import io
from torch.utils.data import Dataset

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=10)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.1)
parser.add_argument('--batch_size', type=int, default=5)
parser.add_argument('--test_batch_size', type=int, default=5)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.GroupNorm(min(32, dim), dim)


class ResBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(ResBlock, self).__init__()
        self.norm1 = norm(inplanes)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.norm2 = norm(planes)
        self.conv2 = conv3x3(planes, planes)

    def forward(self, x):
        shortcut = x

        out = self.relu(self.norm1(x))

        if self.downsample is not None:
            shortcut = self.downsample(out)

        out = self.conv1(out)
        out = self.norm2(out)
        out = self.relu(out)
        out = self.conv2(out)

        return out + shortcut


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self, dim):
        super(ODEfunc, self).__init__()
        self.norm1 = norm(dim)
        self.relu = nn.ReLU(inplace=True)
        self.conv1 = ConcatConv2d(dim, dim, 3, 1, 1)
        self.norm2 = norm(dim)
        self.conv2 = ConcatConv2d(dim, dim, 3, 1, 1)
        self.norm3 = norm(dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.norm1(x)
        out = self.relu(out)
        out = self.conv1(t, out)
        out = self.norm2(out)
        out = self.relu(out)
        out = self.conv2(t, out)
        out = self.norm3(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val

class MusicDataset(Dataset):
    def __init__(self, csv_file, root_dir, transform=None):
        self.annotations = pd.read_csv(csv_file)
        self.root_dir = root_dir
        self.transform = transform

    def __len__(self):
        return len(self.annotations)

    def __getitem__(self, index):
        img_path = os.path.join(self.root_dir, self.annotations.iloc[index, 0])
        image = io.imread(img_path)
        y_label = torch.tensor(int(self.annotations.iloc[index, 59]))

        if self.transform:
            image = self.transform(image)
        image = image.narrow(0,0,3)
        return (image, y_label)


def get_music_loaders(data_aug=False, batch_size=50, test_batch_size=25):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])
    dataset = MusicDataset(csv_file = './archive/Data/features_3_sec_processed.csv', root_dir = './archive/Data/mau_spectrogram_squeezed',
                        transform = transforms.ToTensor())
    train_set, test_set = torch.utils.data.random_split(dataset, [2886, 100])
    train_loader = DataLoader(dataset = train_set, batch_size = batch_size, shuffle=True)
    test_loader = DataLoader(dataset = test_set, batch_size = test_batch_size, shuffle=True)
    train_eval_loader = DataLoader(dataset = train_set, batch_size=test_batch_size, shuffle=False)

    return train_loader, test_loader, train_eval_loader

def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 3)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    if args.downsampling_method == 'conv':
        downsampling_layers = [
            nn.Conv2d(3, 64, 3, 1),
            norm(64),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, 4, 2, 1),
            norm(64),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, 4, 2, 1),
        ]
    elif args.downsampling_method == 'res':
        downsampling_layers = [
            nn.Conv2d(3, 64, 3, 1),
            ResBlock(64, 64, stride=2, downsample=conv1x1(64, 64, 2)),
            ResBlock(64, 64, stride=2, downsample=conv1x1(64, 64, 2)),
        ]

    feature_layers = [ODEBlock(ODEfunc(64))] if is_odenet else [ResBlock(64, 64) for _ in range(6)]
    fc_layers = [norm(64), nn.ReLU(inplace=True), nn.AdaptiveAvgPool2d((1, 1)), Flatten(), nn.Linear(64, 3)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_music_loaders(
        args.data_aug, args.batch_size, args.test_batch_size)

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )

Namespace(adjoint=True, batch_size=16, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.03, nepochs=100, network='odenet', save='./experiment4', test_batch_size=16, tol=0.001)
Sequential(
  (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
  (1): GroupNorm(32, 64, eps=1e-05, affine=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): GroupNorm(32, 64, eps=1e-05, affine=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (norm1): GroupNorm(32, 64, eps=1e-05, affine=True)
      (relu): ReLU(inplace=True)
      (conv1): ConcatConv2d(
        (_layer): Conv2d(65, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (norm2): GroupNorm(32, 64, eps=1e-05, affine=True)
      (conv2): ConcatConv2d(
        (_layer): Conv2d(65, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (norm3): GroupNorm(32, 64, eps=1e-05, affine=True)
    )
  )
  (8): GroupNorm(32, 64, eps=1e-05, affine=True)
  (9): ReLU(inplace=True)
  (10): AdaptiveAvgPool2d(output_size=(1, 1))
  (11): Flatten()
  (12): Linear(in_features=64, out_features=3, bias=True)
)
Number of parameters: 208963
Epoch 0000 | Time 1.588 (1.588) | NFE-F 32.0 | NFE-B 38.0 | Train Acc 0.3340 | Test Acc 0.3200
Epoch 0001 | Time 0.419 (0.788) | NFE-F 37.1 | NFE-B 30.2 | Train Acc 0.6185 | Test Acc 0.6000
Epoch 0002 | Time 0.419 (0.605) | NFE-F 35.8 | NFE-B 26.7 | Train Acc 0.6892 | Test Acc 0.7100
Epoch 0003 | Time 0.438 (0.569) | NFE-F 35.6 | NFE-B 26.3 | Train Acc 0.8056 | Test Acc 0.8200
Epoch 0004 | Time 0.444 (0.560) | NFE-F 35.5 | NFE-B 26.0 | Train Acc 0.8458 | Test Acc 0.8600
Epoch 0005 | Time 0.415 (0.555) | NFE-F 35.5 | NFE-B 26.5 | Train Acc 0.8888 | Test Acc 0.8700
Epoch 0006 | Time 0.427 (0.562) | NFE-F 35.6 | NFE-B 27.8 | Train Acc 0.8042 | Test Acc 0.8100
Epoch 0007 | Time 0.426 (0.550) | NFE-F 35.6 | NFE-B 27.5 | Train Acc 0.9037 | Test Acc 0.9000
Epoch 0008 | Time 0.424 (0.537) | NFE-F 35.6 | NFE-B 26.6 | Train Acc 0.8676 | Test Acc 0.8300
Epoch 0009 | Time 0.429 (0.546) | NFE-F 35.6 | NFE-B 27.5 | Train Acc 0.8645 | Test Acc 0.8600
Epoch 0010 | Time 0.436 (0.558) | NFE-F 35.6 | NFE-B 28.2 | Train Acc 0.9494 | Test Acc 0.9200
Epoch 0011 | Time 0.481 (0.563) | NFE-F 35.6 | NFE-B 27.9 | Train Acc 0.8524 | Test Acc 0.7900
Epoch 0012 | Time 0.423 (0.585) | NFE-F 35.8 | NFE-B 29.5 | Train Acc 0.9338 | Test Acc 0.8900
Epoch 0013 | Time 0.506 (0.605) | NFE-F 35.8 | NFE-B 31.2 | Train Acc 0.9740 | Test Acc 0.9500
Epoch 0014 | Time 0.515 (0.626) | NFE-F 36.1 | NFE-B 33.7 | Train Acc 0.9747 | Test Acc 0.9700
Epoch 0015 | Time 0.483 (0.624) | NFE-F 37.2 | NFE-B 33.3 | Train Acc 0.9480 | Test Acc 0.8900
Epoch 0016 | Time 0.513 (0.623) | NFE-F 36.6 | NFE-B 33.5 | Train Acc 0.9622 | Test Acc 0.9300
Epoch 0017 | Time 0.533 (0.633) | NFE-F 38.4 | NFE-B 33.7 | Train Acc 0.9761 | Test Acc 0.9500
Epoch 0018 | Time 0.426 (0.637) | NFE-F 40.0 | NFE-B 33.3 | Train Acc 0.9827 | Test Acc 0.9500
Epoch 0019 | Time 0.517 (0.622) | NFE-F 38.2 | NFE-B 32.9 | Train Acc 0.9317 | Test Acc 0.9200
Epoch 0020 | Time 0.485 (0.644) | NFE-F 40.7 | NFE-B 33.8 | Train Acc 0.9480 | Test Acc 0.9000
Epoch 0021 | Time 0.480 (0.611) | NFE-F 37.4 | NFE-B 32.3 | Train Acc 0.9900 | Test Acc 0.9500
Epoch 0022 | Time 0.427 (0.637) | NFE-F 38.2 | NFE-B 34.5 | Train Acc 0.9733 | Test Acc 0.9500
Epoch 0023 | Time 0.480 (0.634) | NFE-F 37.1 | NFE-B 34.8 | Train Acc 0.9875 | Test Acc 0.9600
Epoch 0024 | Time 0.519 (0.638) | NFE-F 38.8 | NFE-B 34.3 | Train Acc 0.9820 | Test Acc 0.9400
Epoch 0025 | Time 0.501 (0.641) | NFE-F 39.5 | NFE-B 34.3 | Train Acc 0.9792 | Test Acc 0.9400
Epoch 0026 | Time 1.118 (40.150) | NFE-F 41.6 | NFE-B 33.8 | Train Acc 0.9913 | Test Acc 0.9600
Epoch 0027 | Time 1.225 (7.137) | NFE-F 40.9 | NFE-B 33.7 | Train Acc 0.9626 | Test Acc 0.8700
Epoch 0028 | Time 1.048 (1.897) | NFE-F 41.3 | NFE-B 36.4 | Train Acc 0.9754 | Test Acc 0.9600
Epoch 0029 | Time 1.141 (1.087) | NFE-F 40.9 | NFE-B 35.8 | Train Acc 0.9674 | Test Acc 0.9600
Epoch 0030 | Time 0.546 (0.910) | NFE-F 41.4 | NFE-B 37.0 | Train Acc 0.9789 | Test Acc 0.9400
Epoch 0031 | Time 0.544 (0.811) | NFE-F 40.8 | NFE-B 37.0 | Train Acc 0.9851 | Test Acc 0.9400
Epoch 0032 | Time 0.567 (0.773) | NFE-F 40.8 | NFE-B 37.3 | Train Acc 0.9955 | Test Acc 0.9600
Epoch 0033 | Time 0.567 (0.745) | NFE-F 42.9 | NFE-B 37.9 | Train Acc 0.9990 | Test Acc 0.9700
Epoch 0034 | Time 0.522 (0.715) | NFE-F 43.1 | NFE-B 37.6 | Train Acc 0.9861 | Test Acc 0.9400
Epoch 0035 | Time 0.511 (0.697) | NFE-F 43.2 | NFE-B 37.5 | Train Acc 0.9307 | Test Acc 0.8600
